# =============================================================================
# Security Scan - セキュリティスキャン
# =============================================================================
# このワークフローは以下のセキュリティチェックを実行します：
# 1. 依存関係の脆弱性スキャン（npm audit）
# 2. Snykによる詳細なセキュリティ分析
# 3. コード内のセキュリティ問題チェック
# 4. 依存関係の更新チェック
# 5. セキュリティレポートの生成
# =============================================================================

name: Security Scan

# トリガー条件：定期実行（毎週月曜日）とmainブランチへの変更
on:
  schedule:
    # 毎週月曜日の午前9時に実行（定期セキュリティチェック）
    - cron: '0 9 * * 1'
  push:
    branches: [main] # mainブランチへのプッシュ時
  pull_request:
    branches: [main] # mainブランチへのPR時

# グローバル環境変数
env:
  NODE_VERSION: '18' # Node.jsのバージョン

jobs:
  # =============================================================================
  # 依存関係の脆弱性スキャン - npm auditによる脆弱性チェック
  # =============================================================================
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # npm auditによる脆弱性チェック（JSON形式で出力）
      - name: Run npm audit
        run: npm audit --audit-level=moderate --json > audit-report.json || true

      # 監査レポートをアーティファクトとして保存
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: audit-report.json

      # PRに監査結果をコメントとして投稿
      - name: Comment PR with audit results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const auditData = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
              const vulnerabilities = auditData.metadata.vulnerabilities;
              
              let comment = '## 🔒 Security Audit Results\n\n';
              comment += `**Total vulnerabilities found:** ${vulnerabilities.total}\n\n`;
              comment += `- Critical: ${vulnerabilities.critical}\n`;
              comment += `- High: ${vulnerabilities.high}\n`;
              comment += `- Moderate: ${vulnerabilities.moderate}\n`;
              comment += `- Low: ${vulnerabilities.low}\n\n`;
              
              if (vulnerabilities.total > 0) {
                comment += '⚠️ **Please review and fix vulnerabilities before merging.**\n';
              } else {
                comment += '✅ **No vulnerabilities found!**\n';
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('No audit report found or error reading file');
            }

  # =============================================================================
  # Snyk セキュリティスキャン - 詳細なセキュリティ分析
  # =============================================================================
  snyk-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Snykによる脆弱性チェック（高深刻度以上で失敗）
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=all
        continue-on-error: true # 失敗してもワークフローを継続

      # Snykによるライセンス問題チェック
      - name: Run Snyk to check for license issues
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=all --command=license
        continue-on-error: true

  # =============================================================================
  # コードのセキュリティチェック - コード内のセキュリティ問題検出
  # =============================================================================
  code-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # ハードコードされたシークレット（パスワード、APIキー、トークン）の検出
      - name: Check for hardcoded secrets
        run: |
          # パスワード、APIキー、トークンなどのパターンをチェック（変数名は除外）
          if grep -r -i "password.*=.*['\"][^'\"]{8,}['\"]" src/ --include="*.ts" --include="*.tsx" --include="*.js" | grep -v "password.*=.*['\"][^'\"]*['\"]"; then
            echo "❌ Potential hardcoded passwords found"
            exit 1
          fi

          if grep -r -i "api.*key.*=.*['\"][^'\"]{8,}['\"]" src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
            echo "❌ Potential hardcoded API keys found"
            exit 1
          fi

          if grep -r -i "token.*=.*['\"][^'\"]{8,}['\"]" src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
            echo "❌ Potential hardcoded tokens found"
            exit 1
          fi

          echo "✅ No hardcoded secrets found"

      # SQLインジェクション脆弱性の検出
      - name: Check for SQL injection vulnerabilities
        run: |
          # 生のSQLクエリの使用をチェック
          if grep -r "execute.*sql\|query.*sql" src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
            echo "⚠️ Potential SQL injection vulnerabilities found"
            echo "Please use parameterized queries or Prisma ORM"
          else
            echo "✅ No potential SQL injection vulnerabilities found"
          fi

      # XSS（クロスサイトスクリプティング）脆弱性の検出
      - name: Check for XSS vulnerabilities
        run: |
          # innerHTMLの使用をチェック
          if grep -r "innerHTML" src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
            echo "⚠️ Potential XSS vulnerabilities found (innerHTML usage)"
            echo "Please use textContent or React's safe rendering methods"
          else
            echo "✅ No potential XSS vulnerabilities found"
          fi

  # =============================================================================
  # 依存関係の更新チェック - 古いパッケージの検出
  # =============================================================================
  dependency-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # 古いパッケージの検出とレポート生成
      - name: Check for outdated packages
        run: |
          npm outdated --json > outdated-packages.json || true

          if [ -s outdated-packages.json ]; then
            echo "📦 Outdated packages found:"
            cat outdated-packages.json
            echo "Please consider updating packages for security patches"
          else
            echo "✅ All packages are up to date"
          fi

      # 古いパッケージレポートをアーティファクトとして保存
      - name: Upload outdated packages report
        uses: actions/upload-artifact@v4
        with:
          name: outdated-packages
          path: outdated-packages.json

  # =============================================================================
  # セキュリティレポートの生成 - 全スキャン結果の統合レポート
  # =============================================================================
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, snyk-scan, code-security, dependency-updates] # 全セキュリティジョブの完了を待つ
    if: always() # 他のジョブの成功・失敗に関係なく実行
    steps:
      # セキュリティレポートの生成
      - name: Generate security report
        run: |
          echo "## 🔒 Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "### Scan Results:" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Snyk Scan: ${{ needs.snyk-scan.result }}" >> security-report.md
          echo "- Code Security: ${{ needs.code-security.result }}" >> security-report.md
          echo "- Dependency Updates: ${{ needs.dependency-updates.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "### Recommendations:" >> security-report.md
          echo "1. Review and fix any high/critical vulnerabilities" >> security-report.md
          echo "2. Update outdated packages regularly" >> security-report.md
          echo "3. Follow security best practices in code" >> security-report.md

      # セキュリティレポートをアーティファクトとして保存
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
