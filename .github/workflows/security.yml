name: Security Scan

on:
  schedule:
    # 毎週月曜日の午前9時に実行
    - cron: '0 9 * * 1'
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # 依存関係の脆弱性スキャン
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate --json > audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-report
          path: audit-report.json

      - name: Comment PR with audit results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const auditData = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
              const vulnerabilities = auditData.metadata.vulnerabilities;
              
              let comment = '## 🔒 Security Audit Results\n\n';
              comment += `**Total vulnerabilities found:** ${vulnerabilities.total}\n\n`;
              comment += `- Critical: ${vulnerabilities.critical}\n`;
              comment += `- High: ${vulnerabilities.high}\n`;
              comment += `- Moderate: ${vulnerabilities.moderate}\n`;
              comment += `- Low: ${vulnerabilities.low}\n\n`;
              
              if (vulnerabilities.total > 0) {
                comment += '⚠️ **Please review and fix vulnerabilities before merging.**\n';
              } else {
                comment += '✅ **No vulnerabilities found!**\n';
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('No audit report found or error reading file');
            }

  # Snyk セキュリティスキャン
  snyk-scan:
    runs-on: ubuntu-latest
    # Snykトークンが設定されている場合のみ実行
    if: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=high

      - name: Run Snyk to check for license issues
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=high --command=license

  # コードのセキュリティチェック
  code-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for hardcoded secrets
        run: |
          # パスワード、APIキー、トークンなどのパターンをチェック
          if grep -r -i "password.*=.*['\"][^'\"]*['\"]" src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
            echo "❌ Potential hardcoded passwords found"
            exit 1
          fi
          
          if grep -r -i "api.*key.*=.*['\"][^'\"]*['\"]" src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
            echo "❌ Potential hardcoded API keys found"
            exit 1
          fi
          
          if grep -r -i "token.*=.*['\"][^'\"]*['\"]" src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
            echo "❌ Potential hardcoded tokens found"
            exit 1
          fi
          
          echo "✅ No hardcoded secrets found"

      - name: Check for SQL injection vulnerabilities
        run: |
          # 生のSQLクエリの使用をチェック
          if grep -r "execute.*sql\|query.*sql" src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
            echo "⚠️ Potential SQL injection vulnerabilities found"
            echo "Please use parameterized queries or Prisma ORM"
          else
            echo "✅ No potential SQL injection vulnerabilities found"
          fi

      - name: Check for XSS vulnerabilities
        run: |
          # innerHTMLの使用をチェック
          if grep -r "innerHTML" src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
            echo "⚠️ Potential XSS vulnerabilities found (innerHTML usage)"
            echo "Please use textContent or React's safe rendering methods"
          else
            echo "✅ No potential XSS vulnerabilities found"
          fi

  # 依存関係の更新チェック
  dependency-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated packages
        run: |
          npm outdated --json > outdated-packages.json || true
          
          if [ -s outdated-packages.json ]; then
            echo "📦 Outdated packages found:"
            cat outdated-packages.json
            echo "Please consider updating packages for security patches"
          else
            echo "✅ All packages are up to date"
          fi

      - name: Upload outdated packages report
        uses: actions/upload-artifact@v3
        with:
          name: outdated-packages
          path: outdated-packages.json

  # セキュリティレポートの生成
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, snyk-scan, code-security, dependency-updates]
    if: always()
    steps:
      - name: Generate security report
        run: |
          echo "## 🔒 Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "### Scan Results:" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Snyk Scan: ${{ needs.snyk-scan.result }}" >> security-report.md
          echo "- Code Security: ${{ needs.code-security.result }}" >> security-report.md
          echo "- Dependency Updates: ${{ needs.dependency-updates.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "### Recommendations:" >> security-report.md
          echo "1. Review and fix any high/critical vulnerabilities" >> security-report.md
          echo "2. Update outdated packages regularly" >> security-report.md
          echo "3. Follow security best practices in code" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
