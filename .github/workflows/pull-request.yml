# =============================================================================
# Pull Request Checks - プルリクエスト品質チェック
# =============================================================================
# このワークフローは以下の品質チェックを実行します：
# 1. コードレビュー用チェック（リント、フォーマット、型チェック）
# 2. テスト実行（ユニットテスト、カバレッジ）
# 3. ビルドテスト
# 4. セキュリティチェック
# 5. パフォーマンスチェック
# 6. PRラベル・説明チェック
# =============================================================================

name: Pull Request Checks

# トリガー条件：main/developブランチへのPR
on:
  pull_request:
    branches: [main, develop]

# グローバル環境変数
env:
  NODE_VERSION: '18'  # Node.jsのバージョン

jobs:
  # =============================================================================
  # コードレビュー用のチェック - コード品質とコーディング規約の確認
  # =============================================================================
  code-review:
    runs-on: self-hosted  # Self-hosted Runnerを使用（Supabase接続のため）
    steps:
      # リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4

      # Node.js環境のセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 依存関係のインストール
      - name: Install dependencies
        run: npm ci

      # ESLintによるコード品質チェック
      - name: Run ESLint
        run: npm run lint

      # Prettierによるコードフォーマットチェック
      - name: Run Prettier check
        run: npm run format:check

      # TypeScriptコンパイラによる型チェック
      - name: Run TypeScript check
        run: npm run type-check

      # デバッグ用console.log文の検出
      - name: Check for console.log statements
        run: |
          if grep -r "console\.log" src/ --include="*.ts" --include="*.tsx"; then
            echo "❌ console.log statements found in source code"
            echo "Please remove console.log statements before submitting PR"
            exit 1
          else
            echo "✅ No console.log statements found"
          fi

      # TODOコメントの検出（警告のみ）
      - name: Check for TODO comments
        run: |
          if grep -r "TODO" src/ --include="*.ts" --include="*.tsx"; then
            echo "⚠️ TODO comments found in source code"
            echo "Please review and address TODO comments"
          else
            echo "✅ No TODO comments found"
          fi

  # =============================================================================
  # テスト実行 - ユニットテストとインテグレーションテスト
  # =============================================================================
  test:
    runs-on: self-hosted  # Self-hosted Runnerを使用
    # PostgreSQLサービスコンテナの設定（テスト用データベース）
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # テスト用データベースのセットアップ
      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push --schema=./prisma/schema.prisma
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test

      # テストの実行
      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test

      # テストカバレッジレポートの生成
      - name: Generate test coverage report
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test

      # カバレッジレポートをCodecovにアップロード
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false  # アップロード失敗でもCIを継続

  # =============================================================================
  # ビルドテスト - アプリケーションのビルド確認
  # =============================================================================
  build:
    runs-on: self-hosted  # Self-hosted Runnerを使用
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Prismaクライアントの生成
      - name: Setup Prisma
        run: |
          npx prisma generate

      # Next.jsアプリケーションのビルド
      - name: Build application
        run: npm run build

  # =============================================================================
  # セキュリティチェック - 依存関係の脆弱性チェック
  # =============================================================================
  security:
    runs-on: self-hosted  # Self-hosted Runnerを使用
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # npm auditによる脆弱性チェック
      - name: Run security audit
        run: npm audit --audit-level=moderate

      # 高深刻度の脆弱性チェック（失敗時はCIを停止）
      - name: Check for known vulnerabilities
        run: |
          if npm audit --audit-level=high; then
            echo "❌ High severity vulnerabilities found"
            exit 1
          else
            echo "✅ No high severity vulnerabilities found"
          fi

  # =============================================================================
  # パフォーマンスチェック - バンドルサイズとファイルサイズの確認
  # =============================================================================
  performance:
    runs-on: self-hosted  # Self-hosted Runnerを使用
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # バンドルサイズの分析
      - name: Check bundle size
        run: |
          npm run build
          echo "Bundle size analysis completed"

      # 大きなファイルの検出（行数ベース）
      - name: Check for large files
        run: |
          find . -name "*.js" -o -name "*.ts" -o -name "*.tsx" | xargs wc -l | sort -nr | head -10
          echo "Top 10 largest files by line count"

  # =============================================================================
  # PR ラベルチェック - プルリクエストの品質確認
  # =============================================================================
  pr-labels:
    runs-on: self-hosted  # Self-hosted Runnerを使用
    steps:
      # PRラベルの確認
      - name: Check PR labels
        run: |
          if [ -z "${{ github.event.pull_request.labels.*.name }}" ]; then
            echo "⚠️ No labels found on PR"
            echo "Please add appropriate labels (e.g., feature, bugfix, documentation)"
          else
            echo "✅ PR has labels: ${{ github.event.pull_request.labels.*.name }}"
          fi

      # PR説明文の確認
      - name: Check PR description
        run: |
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "⚠️ No description found on PR"
            echo "Please add a description explaining the changes"
          else
            echo "✅ PR has description"
          fi
